/*
 * This file is generated by jOOQ.
 */
package com.pedro.vertx.database.gen.tables.daos;


import com.pedro.vertx.database.gen.tables.BlogUser;
import com.pedro.vertx.database.gen.tables.records.BlogUserRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;


import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlogUserDao extends AbstractReactiveVertxDAO<BlogUserRecord, com.pedro.vertx.database.gen.tables.pojos.BlogUser, Integer, Single<List<com.pedro.vertx.database.gen.tables.pojos.BlogUser>>, Single<Optional<com.pedro.vertx.database.gen.tables.pojos.BlogUser>>, Single<Integer>, Single<Integer>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<BlogUserRecord,com.pedro.vertx.database.gen.tables.pojos.BlogUser,Integer> {

    /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
    public BlogUserDao(Configuration configuration, io.vertx.reactivex.sqlclient.SqlClient delegate) {
        super(BlogUser.BLOG_USER, com.pedro.vertx.database.gen.tables.pojos.BlogUser.class, new ReactiveRXQueryExecutor<BlogUserRecord,com.pedro.vertx.database.gen.tables.pojos.BlogUser,Integer>(configuration,delegate,com.pedro.vertx.database.gen.tables.mappers.RowMappers.getBlogUserMapper()));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(com.pedro.vertx.database.gen.tables.pojos.BlogUser object) {
        return object.getId();
    }

    /**
     * Find records that have <code>username IN (values)</code> asynchronously
     */
    public Single<List<com.pedro.vertx.database.gen.tables.pojos.BlogUser>> findManyByUsername(List<String> values) {
        return findManyByCondition(BlogUser.BLOG_USER.USERNAME.in(values));
    }

    /**
     * Find records that have <code>password IN (values)</code> asynchronously
     */
    public Single<List<com.pedro.vertx.database.gen.tables.pojos.BlogUser>> findManyByPassword(List<String> values) {
        return findManyByCondition(BlogUser.BLOG_USER.PASSWORD.in(values));
    }

    @Override
    public ReactiveRXQueryExecutor<BlogUserRecord,com.pedro.vertx.database.gen.tables.pojos.BlogUser,Integer> queryExecutor(){
        return (ReactiveRXQueryExecutor<BlogUserRecord,com.pedro.vertx.database.gen.tables.pojos.BlogUser,Integer>) super.queryExecutor();
    }
}
