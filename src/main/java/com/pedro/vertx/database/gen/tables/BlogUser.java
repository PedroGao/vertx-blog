/*
 * This file is generated by jOOQ.
 */
package com.pedro.vertx.database.gen.tables;


import com.pedro.vertx.database.gen.Indexes;
import com.pedro.vertx.database.gen.Keys;
import com.pedro.vertx.database.gen.Public;
import com.pedro.vertx.database.gen.tables.records.BlogUserRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlogUser extends TableImpl<BlogUserRecord> {

    private static final long serialVersionUID = -1000983241;

    /**
     * The reference instance of <code>public.blog_user</code>
     */
    public static final BlogUser BLOG_USER = new BlogUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlogUserRecord> getRecordType() {
        return BlogUserRecord.class;
    }

    /**
     * The column <code>public.blog_user.id</code>.
     */
    public final TableField<BlogUserRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('blog_user_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.blog_user.username</code>.
     */
    public final TableField<BlogUserRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.blog_user.password</code>.
     */
    public final TableField<BlogUserRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>public.blog_user</code> table reference
     */
    public BlogUser() {
        this(DSL.name("blog_user"), null);
    }

    /**
     * Create an aliased <code>public.blog_user</code> table reference
     */
    public BlogUser(String alias) {
        this(DSL.name(alias), BLOG_USER);
    }

    /**
     * Create an aliased <code>public.blog_user</code> table reference
     */
    public BlogUser(Name alias) {
        this(alias, BLOG_USER);
    }

    private BlogUser(Name alias, Table<BlogUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private BlogUser(Name alias, Table<BlogUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BlogUser(Table<O> child, ForeignKey<O, BlogUserRecord> key) {
        super(child, key, BLOG_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BLOG_USER_PKEY, Indexes.USERNAME_INDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BlogUserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BLOG_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BlogUserRecord> getPrimaryKey() {
        return Keys.BLOG_USER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BlogUserRecord>> getKeys() {
        return Arrays.<UniqueKey<BlogUserRecord>>asList(Keys.BLOG_USER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BlogUser as(String alias) {
        return new BlogUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BlogUser as(Name alias) {
        return new BlogUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BlogUser rename(String name) {
        return new BlogUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BlogUser rename(Name name) {
        return new BlogUser(name, null);
    }
}
